-- Initialize anime schema (PostgreSQL 17)

\connect anime_db;

BEGIN;

CREATE SCHEMA IF NOT EXISTS anime AUTHORIZATION anime_owner;
SET search_path TO anime, public;

-- Optional extensions you may want
-- CREATE EXTENSION IF NOT EXISTS pg_trgm;
-- CREATE EXTENSION IF NOT EXISTS btree_gist;

-- --------------------
-- Lookup / reference
-- --------------------
CREATE TABLE titles (
    title_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title_name     TEXT NOT NULL,
    title_japanese TEXT,
    title_english  TEXT
);

CREATE TABLE ratings (
    rating_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_code     TEXT NOT NULL UNIQUE
);

CREATE TABLE anime_images (
    image_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    jpg_url        TEXT NOT NULL,
    jpg_url_small  TEXT NOT NULL
);

CREATE TABLE trailers (
    trailer_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    trailer_url  TEXT NOT NULL UNIQUE,
    small_img_url TEXT NOT NULL,
    med_img_url   TEXT NOT NULL
);

-- --------------------
-- Main entity
-- --------------------
CREATE TABLE anime (
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mal_id          BIGINT NOT NULL UNIQUE,
    url             TEXT NOT NULL UNIQUE,
    title_id        BIGINT NOT NULL REFERENCES titles(title_id),


    series_type     TEXT NOT NULL CHECK (series_type IN ('TV','Movie','OVA','ONA','Special','Music')),
    series_status   TEXT NOT NULL CHECK (series_status IN ('Airing','Finished','Not yet aired','Cancelled')),
    series_source   TEXT,                  -- e.g., 'Manga','Light Novel','Original','Game', etc.
    duration        INTERVAL,              -- per-episode or average
    rating_id       BIGINT NOT NULL REFERENCES ratings(rating_id) ON DELETE SET NULL,
    synopsis        TEXT,
    background      TEXT,

    aired           DATERANGE,             -- replaces aired_from / aired_to

    image_id        BIGINT REFERENCES anime_images(image_id) ON DELETE SET NULL,
    trailer_id      BIGINT REFERENCES trailers(trailer_id) ON DELETE SET NULL,

    created_at      TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at      TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE anime_metrics(
    anime_id      BIGINT NOT NULL REFERENCES anime(id) ON DELETE CASCADE,
    last_updated  TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    score         NUMERIC(3,2) CHECK (score BETWEEN 0 AND 10),
    scored_by       INT CHECK (scored_by >= 0),
    rank            INT CHECK (rank > 0),
    popularity      INT CHECK (popularity > 0),
    members         BIGINT CHECK (members >= 0),
    favorites       BIGINT CHECK (favorites >= 0),
    episodes        INT CHECK (episodes >= 0),
    PRIMARY KEY (anime_id, last_updated)
);

-- --------------------
-- Broadcast (one row per anime)
-- --------------------
CREATE TABLE anime_broadcast (
    anime_id   BIGINT PRIMARY KEY REFERENCES anime(id) ON DELETE CASCADE,
    weekday    TEXT NOT NULL CHECK (weekday IN ('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday')),
    time_local TIME,
    tz_name    TEXT,        -- IANA tz if you have it (e.g., 'Asia/Tokyo')
    raw_string TEXT
);

-- --------------------
-- Many-to-manys
-- --------------------
CREATE TABLE genres (
  genre_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name     TEXT UNIQUE NOT NULL
);

CREATE TABLE anime_genres (
  anime_id BIGINT NOT NULL REFERENCES anime(id) ON DELETE CASCADE,
  genre_id BIGINT NOT NULL REFERENCES genres(genre_id) ON DELETE CASCADE,
  PRIMARY KEY (anime_id, genre_id)
);

CREATE TABLE studios (
  studio_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name      TEXT UNIQUE NOT NULL
);

CREATE TABLE anime_studios (
  anime_id  BIGINT NOT NULL REFERENCES anime(id) ON DELETE CASCADE,
  studio_id BIGINT NOT NULL REFERENCES studios(studio_id) ON DELETE CASCADE,
  PRIMARY KEY (anime_id, studio_id)
);

CREATE TABLE licensors (
  licensor_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name        TEXT UNIQUE NOT NULL
);

CREATE TABLE anime_licensors (
  anime_id    BIGINT NOT NULL REFERENCES anime(id) ON DELETE CASCADE,
  licensor_id BIGINT NOT NULL REFERENCES licensors(licensor_id) ON DELETE CASCADE,
  PRIMARY KEY (anime_id, licensor_id)
);

COMMIT;
